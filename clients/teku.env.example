# Teku Beacon Chain Client and Validator Configuration

# Path/filename of the yaml config file
CONFIG_FILE=

# Network Options

# The Checkpointz server that will be used to bootstrap this node
CHECKPOINT_SYNC_URL=

# Contract address for the deposit contract. Only required when creating a custom network
ETH1_DEPOSIT_CONTRACT_ADDRESS=

# The genesis state. This value should be a file or URL pointing to an SSZ-encoded finalized checkpoint state
GENESIS_STATE=

# Allows syncing outside of the weak subjectivity period
IGNORE_WEAK_SUBJECTIVITY_PERIOD_ENABLED=false

# The initial state. This value should be a file or URL pointing to an SSZ-encoded finalized checkpoint state
INITIAL_STATE=

# Represents which network to use
NETWORK="mainnet"

# P2P Options

# P2P advertised IP
P2P_ADVERTISED_IP="127.0.0.1"

# P2P advertised port. The default is the port specified in --p2p-port
P2P_ADVERTISED_PORT=

# Advertised UDP port to external peers. The default is the port specified in --p2p-advertised-port
P2P_ADVERTISED_UDP_PORT=

# Specifies a list of 'direct' peers with which to establish and maintain connections
P2P_DIRECT_PEERS=

# List of ENRs of the bootnodes
P2P_DISCOVERY_BOOTNODES=

# Enables discv5 discovery
P2P_DISCOVERY_ENABLED=true

# Whether discovery accepts messages and peer records with site local (RFC1918) addresses
P2P_DISCOVERY_SITE_LOCAL_ADDRESSES_ENABLED=false

# Enables P2P
P2P_ENABLED=true

# P2P network interface
P2P_INTERFACE="0.0.0.0"

# Specify the NAT circumvention method to be used, possible values are UPNP, NONE
P2P_NAT_METHOD="NONE"

# Lower bound on the target number of peers
P2P_PEER_LOWER_BOUND=64

# Upper bound on the target number of peers
P2P_PEER_UPPER_BOUND=100

# P2P port
P2P_PORT=9000

# This node's private key file. If not specified, uses or generates a key which is stored within the <beacon-data-dir>
P2P_PRIVATE_KEY_FILE=

# Specifies a list of 'static' peers with which to establish and maintain connections
P2P_STATIC_PEERS=

# Default: false
P2P_SUBSCRIBE_ALL_SUBNETS_ENABLED=false

# UDP port used for discovery. The default is the port specified in --p2p-port
P2P_UDP_PORT=

# Validator Options

# Enable validators doppelganger detection
DOPPELGANGER_DETECTION_ENABLED=false

# Enable terminating the process if no validator keys are found during startup
EXIT_WHEN_NO_VALIDATOR_KEYS_ENABLED=false

# If enabled and an owned validator key is detected as slashed, the node will terminate. In this case, the service should not be restarted
SHUT_DOWN_WHEN_VALIDATOR_SLASHED_ENABLED=false

# Restrict local signing to a single operation at a time
VALIDATOR_IS_LOCAL_SLASHING_PROTECTION_SYNCHRONIZED_ENABLED=true

# Validator keys configuration. Format: <KEY_DIR>:<PASS_DIR> | <KEY_FILE>:<PASS_FILE>
VALIDATOR_KEYS=

# Enable validators registration to builder infrastructure
VALIDATORS_BUILDER_REGISTRATION_DEFAULT_ENABLED=false

# Generate attestations as soon as a block is known, rather than delaying until the attestation is due
VALIDATORS_EARLY_ATTESTATIONS_ENABLED=true

# Keystore (PKCS12/JKS) to use for TLS mutual authentication with external signer
VALIDATORS_EXTERNAL_SIGNER_KEYSTORE=

# Password file to decrypt keystore (PKCS12/JKS) that will be used for TLS mutual authentication with external signer
VALIDATORS_EXTERNAL_SIGNER_KEYSTORE_PASSWORD_FILE=

# The list of external signer public keys, or a URL to load the keys from
VALIDATORS_EXTERNAL_SIGNER_PUBLIC_KEYS=

# Enable internal slashing protection for external signers
VALIDATORS_EXTERNAL_SIGNER_SLASHING_PROTECTION_ENABLED=true

# Timeout (in milliseconds) for the external signing service
VALIDATORS_EXTERNAL_SIGNER_TIMEOUT=5000

# Keystore (PKCS12/JKS) to trust external signer's self-signed certificate
VALIDATORS_EXTERNAL_SIGNER_TRUSTSTORE=

# Password file to decrypt keystore (PKCS12/JKS) that will be used to trust external signer's self-signed certificate
VALIDATORS_EXTERNAL_SIGNER_TRUSTSTORE_PASSWORD_FILE=

# URL for the external signing service
VALIDATORS_EXTERNAL_SIGNER_URL=

# Graffiti value to include during block creation. Value gets converted to bytes and padded to Bytes32
VALIDATORS_GRAFFITI=

# Appends CL and EL clients information with a space to user's graffiti when producing a block on the Beacon Node
VALIDATORS_GRAFFITI_CLIENT_APPEND_FORMAT="AUTO"

# File to load graffiti value to include during block creation. Takes precedence over --validators-graffiti
VALIDATORS_GRAFFITI_FILE=

# Enable locking validator keystore files
VALIDATORS_KEYSTORE_LOCKING_ENABLED=true

# Set strategy for handling performance tracking. Valid values: LOGGING, METRICS, ALL, NONE
VALIDATORS_PERFORMANCE_TRACKING_MODE="ALL"

# Use blinded blocks when in block production duties
VALIDATORS_PROPOSER_BLINDED_BLOCKS_ENABLED=false

# Remote URL or local file path to load proposer configuration from
VALIDATORS_PROPOSER_CONFIG=

# Enable the proposer configuration reload on every proposer preparation (once per epoch)
VALIDATORS_PROPOSER_CONFIG_REFRESH_ENABLED=false

# Default fee recipient sent to the execution engine, which could use it as fee recipient when producing a new execution block
VALIDATORS_PROPOSER_DEFAULT_FEE_RECIPIENT=

# Execution Layer Options

# Set the compare factor applied to the builder bid value when comparing it with locally produced payload. Factor is expressed in percentage
BUILDER_BID_COMPARE_FACTOR=90

# URL for an external Builder node
BUILDER_ENDPOINT=

# Set User-Agent header to teku/v<version> when making a builder bid request to help builders identify clients and versions
BUILDER_SET_USER_AGENT_HEADER=true

# Use bundled snapshot for most networks and persist deposit tree snapshot
DEPOSIT_SNAPSHOT_ENABLED=true

# URL for Execution Engine node
EE_ENDPOINT=

# A unique identifier for the consensus layer client. This identifier will be added to the JWT claims as an 'id' claim
EE_JWT_CLAIM_ID=

# Location of the file specifying the hex-encoded 256 bit secret key to be used for verifying/generating jwt tokens
EE_JWT_SECRET_FILE=

# Maximum number of blocks to request deposit contract event logs for in a single request
ETH1_DEPOSIT_CONTRACT_MAX_REQUEST_SIZE=10000

# URLs for Eth1 nodes
ETH1_ENDPOINTS=

# Enables querying EL periodically for the Engine API methods it supports. If incompatibility is detected, there will be a warning raised in the logs
EXCHANGE_CAPABILITIES_MONITORING_ENABLED=true

# Data Storage Options

# Path to beacon node data
DATA_BEACON_PATH=

# Path to the base directory for storage
DATA_BASE_PATH="/home/eniko/.local/share/teku"

# Sets the frequency, in slots, at which to store finalized states to disk
DATA_STORAGE_ARCHIVE_FREQUENCY=2048

# Sets the strategy for handling historical chain data. Valid values: ARCHIVE, PRUNE, MINIMAL, NOT_SET
DATA_STORAGE_MODE="NOT_SET"

# Store non-canonical blocks and associated blobs if they exist
DATA_STORAGE_NON_CANONICAL_BLOCKS_ENABLED=false

# Path to validator client data
DATA_VALIDATOR_PATH=

# Default: false
RECONSTRUCT_HISTORIC_STATES=false

# Beacon REST API Options

# Track validator liveness and enable requests to the liveness rest api
BEACON_LIVENESS_TRACKING_ENABLED=false

# Comma separated list of origins to allow, or * to allow any origin
REST_API_CORS_ORIGINS=

# Enable swagger-docs and swagger-ui endpoints
REST_API_DOCS_ENABLED=false

# Enables Beacon Rest API
REST_API_ENABLED=false

# Comma-separated list of hostnames to allow, or * to allow any host
REST_API_HOST_ALLOWLIST="127.0.0.1,localhost"

# Interface of Beacon Rest API
REST_API_INTERFACE="127.0.0.1"

# Port number of Beacon Rest API
REST_API_PORT=

# Validator REST API Options

# Use the specified file as the bearer token for the validator Rest API
VALIDATOR_API_BEARER_FILE=

# Comma separated list of origins to allow, or * to allow any origin
VALIDATOR_API_CORS_ORIGINS=

# Enable swagger-docs and swagger-ui endpoints
VALIDATOR_API_DOCS_ENABLED=false

# Enables Validator Rest API
VALIDATOR_API_ENABLED=false

# Comma-separated list of hostnames to allow, or * to allow any host
VALIDATOR_API_HOST_ALLOWLIST="127.0.0.1,localhost"

# Interface of Validator Rest API
VALIDATOR_API_INTERFACE="127.0.0.1"

# Keystore used for ssl for the validator api
VALIDATOR_API_KEYSTORE_FILE=

# Password used to decrypt the keystore for the validator api
VALIDATOR_API_KEYSTORE_PASSWORD_FILE=

# Port number of Rest API
VALIDATOR_API_PORT=5052

# Weak Subjectivity Options

# A recent checkpoint within the weak subjectivity period. Should be a string containing <BLOCK_ROOT>:<EPOCH_NUMBER> or a URL containing the field ws_checkpoint with the same information
WS_CHECKPOINT=

# Logging Options

# Logging verbosity levels: OFF, FATAL, ERROR, WARN, INFO, DEBUG, TRACE, ALL
LOGGING="INFO"

# Whether Status and Event log messages include a console color display code
LOG_COLOR_ENABLED=true

# Whether a logger is added for the console, the log file, or both. Valid values: BOTH, CONSOLE, DEFAULT_BOTH, FILE, CUSTOM
LOG_DESTINATION="DEFAULT_BOTH"

# Path containing the location (relative or absolute) and the log filename. If not set will default to <data-path>/logs/teku.log
LOG_FILE=

# Pattern for the filename to apply to rolled over log files. If not set will default to <data-path>/logs/teku_%d{yyyy-MM-dd}.log
LOG_FILE_NAME_PATTERN=

# Whether frequent update events are logged (e.g. every slot and epoch event)
LOG_INCLUDE_EVENTS_ENABLED=true

# Whether events are logged when validators perform duties
LOG_INCLUDE_VALIDATOR_DUTIES_ENABLED=true

# Metrics Options

# Whether block timing metrics are tracked and reported
METRICS_BLOCK_TIMING_TRACKING_ENABLED=true

# Metric categories to enable
METRICS_CATEGORIES="JVM, PROCESS, VALIDATOR_PERFORMANCE, LIBP2P, STORAGE_FINALIZED_DB, EVENTBUS, BEACON, NETWORK, VALIDATOR, REMOTE_VALIDATOR, STORAGE_HOT_DB, EXECUTOR, DISCOVERY, STORAGE"

# Enables metrics collection via Prometheus
METRICS_ENABLED=false

# Comma-separated list of hostnames to allow, or * to allow any host
METRICS_HOST_ALLOWLIST="127.0.0.1,localhost"

# Metrics network interface to expose metrics for Prometheus
METRICS_INTERFACE="127.0.0.1"

# Metrics port to expose metrics for Prometheus
METRICS_PORT=8008

# Publish metrics for node monitoring to an external service
METRICS_PUBLISH_ENDPOINT=

# Interval between metric publications to the external service (measured in seconds)
METRICS_PUBLISH_INTERVAL=60
