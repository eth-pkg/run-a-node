# Loads the configuration from a TOML file.
CONFIG_FILE=

# Sets the log level for process and topics (e.g. "DEBUG; TRACE:discv5,libp2p; REQUIRED:none; DISABLED:none")
LOG_LEVEL=INFO

# Specifies a path for the written JSON log file (deprecated).
LOG_FILE=

# The Eth2 network to join
NETWORK=mainnet

# The directory where nimbus will store all blockchain data.
DATA_DIR=

# A directory containing validator keystores.
VALIDATORS_DIR=

# Remote Web3Signer URL that will be used as a source of validators.
VERIFYING_WEB3_SIGNER_URL=

# The field path of a block property that will be sent for verification to the verifying Web3Signer (for example ".execution_payload.fee_recipient").
PROVEN_BLOCK_PROPERTY=

# Remote Web3Signer URL that will be used as a source of validators.
WEB3_SIGNER_URL=

# Number of seconds between validator list updates
WEB3_SIGNER_UPDATE_INTERVAL=3600

# A directory containing validator keystore passwords.
SECRETS_DIR=

# A directory containing wallet files.
WALLETS_DIR=

# One or more execution layer Engine API URLs.
WEB3_URL=

# One or more execution layer Engine API URLs.
EL=

# Don't use an EL. The node will remain optimistically synced and won't be able to perform validator duties.
NO_EL=false

# Do not display interactive prompts. Quit on missing configuration.
NON_INTERACTIVE=

# Source of network (secp256k1) private key file (random|<path>)
NETKEY_FILE=random

# Use pre-generated INSECURE password for network private key file.
INSECURE_NETKEY_PASSWORD=false

# Node agent string which is used as identifier in network.
AGENT_STRING=nimbus

# Subscribe to all subnet topics when gossiping.
SUBSCRIBE_ALL_SUBNETS=false

# Number of worker threads ("0" = use as many threads as there are CPU cores available).
NUM_THREADS=0

# A file containing the hex-encoded 256 bit secret key to be used for verifying/generating JWT tokens.
JWT_SECRET=

# Specifies one or more bootstrap nodes to use when connecting to the network.
BOOTSTRAP_NODE=

# Specifies a line-delimited file of bootstrap Ethereum network addresses.
BOOTSTRAP_FILE=

# Listening address for the Ethereum LibP2P and Discovery v5 traffic.
LISTEN_ADDRESS=*

# Listening TCP port for Ethereum LibP2P traffic.
TCP_PORT=9000

# Listening UDP port for node discovery.
UDP_PORT=9000

# The target number of peers to connect to.
MAX_PEERS=160

# The maximum number of peers to connect to. Defaults to maxPeers * 1.5.
HARD_MAX_PEERS=

# Specify method to use for determining public address. Must be one of: any, none, upnp, pmp, extip:<IP>
NAT=any

# Discovery can automatically update its ENR with the IP address and UDP port as seen by other nodes it communicates with.
ENR_AUTO_UPDATE=false

# Weak subjectivity checkpoint in the format block_root:epoch_number.
WEAK_SUBJECTIVITY_CHECKPOINT=

# External beacon API to use for syncing (on empty database).
EXTERNAL_BEACON_API_URL=

# Accelerate sync using light client.
SYNC_LIGHT_CLIENT=true

# Recent trusted finalized block root to sync from external beacon API (with `--external-beacon-api-url`). Uses the light client sync protocol to obtain the latest finalized checkpoint (LC is initialized from trusted block root).
TRUSTED_BLOCK_ROOT=

# Recent trusted finalized state root to sync from external beacon API (with `--external-beacon-api-url`).
TRUSTED_STATE_ROOT=

# SSZ file specifying a recent finalized state.
FINALIZED_CHECKPOINT_STATE=

# SSZ file specifying the genesis state of the network (for networks without a built-in genesis state).
GENESIS_STATE=

# URL for obtaining the genesis state of the network (for networks without a built-in genesis state).
GENESIS_STATE_URL=

# SSZ file specifying a recent finalized EIP-4881 deposit tree snapshot.
FINALIZED_DEPOSIT_TREE_SNAPSHOT=

# A name for this node that will appear in the logs. If you set this to 'auto', a persistent automatically generated ID will be selected for each --data-dir folder.
NODE_NAME=

# The graffiti value that will appear in proposed blocks. You can use a 0x-prefixed hex encoded string to specify raw bytes.
GRAFFITI=

# Enable the metrics server.
METRICS=false

# Listening address of the metrics server.
METRICS_ADDRESS=127.0.0.1

# Listening HTTP port of the metrics server.
METRICS_PORT=8008

# Display a status bar at the bottom of the terminal screen.
STATUS_BAR=true

# Textual template for the contents of the status bar.
STATUS_BAR_CONTENTS=

# Enable the REST server.
REST=false

# Port for the REST server.
REST_PORT=5052

# Listening address of the REST server.
REST_ADDRESS=127.0.0.1

# Limit the access to the REST API to a particular hostname (for CORS-enabled clients such as browsers).
REST_ALLOW_ORIGIN=

# The maximum number of recently accessed states that are kept in memory. Speeds up requests obtaining information for consecutive slots or epochs.
REST_STATECACHE_SIZE=3

# The number of seconds to keep recently accessed states in memory.
REST_STATECACHE_TTL=60

# The number of seconds to wait until complete REST request will be received.
REST_REQUEST_TIMEOUT=

# Maximum size of REST request body (kilobytes).
REST_MAX_BODY_SIZE=16384

# Maximum size of REST request headers (kilobytes).
REST_MAX_HEADERS_SIZE=128

# Enable the REST keymanager API.
KEYMANAGER=false

# Listening port for the REST keymanager API.
KEYMANAGER_PORT=5052

# Listening port for the REST keymanager API.
KEYMANAGER_ADDRESS=127.0.0.1

# Limit the access to the Keymanager API to a particular hostname (for CORS-enabled clients such as browsers).
KEYMANAGER_ALLOW_ORIGIN=

# A file specifying the authorization token required for accessing the keymanager API.
KEYMANAGER_TOKEN_FILE=

# Serve data for enabling light clients to stay in sync with the network.
LIGHT_CLIENT_DATA_SERVE=true

# Which classes of light client data to import. Must be one of: none, only-new, full (slow startup), on-demand (may miss validator duties).
LIGHT_CLIENT_DATA_IMPORT_MODE=only-new

# Maximum number of sync committee periods to retain light client data.
LIGHT_CLIENT_DATA_MAX_PERIODS=

# Disable the push model (the beacon node tells a signing process with the private keys of the validators what to sign and when) and load the validators in the beacon node itself.
IN_PROCESS_VALIDATORS=true

# Enable Discovery v5.
DISCV5=true

# Write SSZ dumps of blocks, attestations and states to data dir.
DUMP=false

# The list of privileged, secure and known peers to connect and maintain the connection to. This requires a not random netkey-file. In the multiaddress format like: /ip4/<address>/tcp/<port>/p2p/<peerId-public-key>, or enr format (enr:-xx). Peering agreements are established out of band and must be reciprocal.
DIRECT_PEER=

# If enabled, the beacon node prudently listens for 2 epochs for attestations from a validator with the same index (a doppelganger), before sending an attestation itself. This protects against slashing (due to double-voting) but means you will miss two attestations when restarting.
DOPPELGANGER_DETECTION=true

# Monitor validator activity automatically for validators active on this beacon node.
VALIDATOR_MONITOR_AUTO=true

# One or more validators to monitor - works best when --subscribe-all-subnets is enabled.
VALIDATOR_MONITOR_PUBKEY=

# Publish detailed metrics for each validator individually - may incur significant overhead with large numbers of validators.
VALIDATOR_MONITOR_DETAILS=false

# Suggested fee recipient.
SUGGESTED_FEE_RECIPIENT=

# Suggested gas limit.
SUGGESTED_GAS_LIMIT=

# Enable external payload builder.
PAYLOAD_BUILDER=false

# Payload builder URL.
PAYLOAD_BUILDER_URL=

# Increase execution layer block values for builder bid comparison by a percentage.
LOCAL_BLOCK_VALUE_BOOST=10

# Retention strategy for historical data (archive/prune).
HISTORY=HistoryMode.Prune
