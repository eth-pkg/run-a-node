Sure, here's a sample `.env` file containing the options for the `lighthouse beacon_node` command line tool. You can adjust the values as needed for your specific use case.

```env
# Enable or disable automatic compaction of the database on finalization
AUTO_COMPACT_DB=true

# The margin for blob pruning in epochs
BLOB_PRUNE_MARGIN_EPOCHS=0

# Data directory for the blobs database
BLOBS_DIR=/path/to/blobs_dir

# Specifies how many blocks the database should cache in memory
BLOCK_CACHE_SIZE=5

# One or more comma-delimited base64-encoded ENR's to bootstrap the p2p network
BOOT_NODES=enr1,enr2

# The URL of a service compatible with the MEV-boost API
BUILDER=http://example.com

# If the node is proposing a block and the chain has not finalized within this number of epochs
BUILDER_FALLBACK_EPOCHS_SINCE_FINALIZATION=3

# If the node is proposing a block and has seen this number of skip slots on the canonical chain in a row
BUILDER_FALLBACK_SKIPS=3

# If the node is proposing a block and has seen this number of skip slots on the canonical chain in the past SLOTS_PER_EPOCH
BUILDER_FALLBACK_SKIPS_PER_EPOCH=8

# The HTTP user agent to send alongside requests to the builder URL
BUILDER_USER_AGENT=Lighthouse

# Set the checkpoint blobs to start syncing from
CHECKPOINT_BLOBS=/path/to/checkpoint_blobs

# Set a checkpoint block to start syncing from
CHECKPOINT_BLOCK=/path/to/checkpoint_block

# Set a checkpoint state to start syncing from
CHECKPOINT_STATE=/path/to/checkpoint_state

# Set the remote beacon node HTTP endpoint to use for checkpoint sync
CHECKPOINT_SYNC_URL=http://example.com

# Set the timeout for checkpoint sync calls to remote beacon node HTTP endpoint
CHECKPOINT_SYNC_URL_TIMEOUT=180

# Used to specify a custom root data directory for lighthouse keys and databases
DATADIR=/path/to/datadir

# Specifies the verbosity level used when emitting logs to the terminal
DEBUG_LEVEL=info

# The UDP port that discovery will listen on
DISCOVERY_PORT=9000

# The UDP port that discovery will listen on over IPv6
DISCOVERY_PORT6=9090

# The IP address/ DNS address to broadcast to other peers on how to reach this node
ENR_ADDRESS=127.0.0.1

# The quic UDP4 port that will be set on the local ENR
ENR_QUIC_PORT=8001

# The quic UDP6 port that will be set on the local ENR
ENR_QUIC6_PORT=8002

# The TCP4 port of the local ENR
ENR_TCP_PORT=8003

# The TCP6 port of the local ENR
ENR_TCP6_PORT=8004

# The UDP4 port of the local ENR
ENR_UDP_PORT=8005

# The UDP6 port of the local ENR
ENR_UDP6_PORT=8006

# The epoch interval with which to prune blobs from Lighthouse's database
EPOCHS_PER_BLOB_PRUNE=1

# The number of epochs to wait between running the migration of data from the hot DB to the cold DB
EPOCHS_PER_MIGRATION=1

# Specifies the number of blocks that a deposit log query should span
ETH1_BLOCKS_PER_LOG_QUERY=1000

# Specifies the distance between the Eth1 chain head and the last block which should be imported into the cache
ETH1_CACHE_FOLLOW_DISTANCE=100

# Server endpoint for an execution layer JWT-authenticated HTTP JSON-RPC connection
EXECUTION_ENDPOINT=http://localhost:8545

# File path which contains the hex-encoded JWT secret for the execution endpoint
EXECUTION_JWT=/path/to/jwt.hex

# Used by the beacon node to communicate a unique identifier to execution nodes during JWT authentication
EXECUTION_JWT_ID=

# Hex-encoded JWT secret for the execution endpoint
EXECUTION_JWT_SECRET_KEY=

# Used by the beacon node to communicate a client version to execution nodes during JWT authentication
EXECUTION_JWT_VERSION=

# Unsigned integer to multiply the default execution timeouts by
EXECUTION_TIMEOUT_MULTIPLIER=1

# Set the maximum number of milliseconds to wait for fork choice before proposing a block
FORK_CHOICE_BEFORE_PROPOSAL_TIMEOUT=250

# Data directory for the freezer database
FREEZER_DIR=/path/to/freezer_dir

# A URL of a beacon-API compatible server from which to download the genesis state
GENESIS_STATE_URL=http://example.com

# The timeout in seconds for the request to --genesis-state-url
GENESIS_STATE_URL_TIMEOUT=180

# Specify your custom graffiti to be included in blocks
GRAFFITI="My Custom Graffiti"

# Specifies how many states from the freezer database should cache in memory
HISTORIC_STATE_CACHE_SIZE=1

# Set the listen address for the RESTful HTTP API server
HTTP_ADDRESS=127.0.0.1

# Set the value of the Access-Control-Allow-Origin response HTTP header
HTTP_ALLOW_ORIGIN=*

# Status code to send when a block that is already known is POSTed to the HTTP API
HTTP_DUPLICATE_BLOCK_STATUS=200

# The beacon processor is a scheduler which provides quality-of-service and DoS protection
HTTP_ENABLE_BEACON_PROCESSOR=false

# Set the listen TCP port for the RESTful HTTP API server
HTTP_PORT=5052

# Multiplier to apply to the length of HTTP server-sent-event (SSE) channels
HTTP_SSE_CAPACITY_MULTIPLIER=10

# The path of the certificate to be used when serving the HTTP API server over TLS
HTTP_TLS_CERT=/path/to/tls.crt

# The path of the private key to be used when serving the HTTP API server over TLS
HTTP_TLS_KEY=/path/to/tls.key

# Configures the inbound rate limiter (requests received by this node)
INBOUND_RATE_LIMITER_PROTOCOLS="protocol1:10/60;protocol2:20/120"

# If a block succeeds gossip validation whilst failing full validation, store the block SSZ as a file at this path
INVALID_GOSSIP_VERIFIED_BLOCKS_PATH=/path/to/invalid_blocks

# One or more comma-delimited multiaddrs to manually connect to a libp2p peer without an ENR
LIBP2P_ADDRESSES=/ip4/127.0.0.1/tcp/9000

# The address lighthouse will listen for UDP and TCP connections
LISTEN_ADDRESS=0.0.0.0

# Specifies the log format used when emitting logs to the terminal
LOG_FORMAT=json

# File path where the log file will be stored
LOGFILE=/path/to/logfile.log

# The verbosity level used when emitting logs to the log file
LOGFILE_DEBUG_LEVEL=debug

# Specifies the log format used when emitting logs to the logfile
LOGFILE_FORMAT=DEFAULT

# The maximum number of log files that will be stored
LOGFILE_MAX_NUMBER=5

# The maximum size (in MB) each log file can grow to before rotating
LOGFILE_MAX_SIZE=200

# Refuse to skip more than this many slots when processing an attestation
MAX_SKIP_SLOTS=10

# Set the listen address for the Prometheus metrics HTTP server
METRICS_ADDRESS=127.0.0.1

# Set the value of the Access-Control-Allow-Origin response HTTP header for metrics
METRICS_ALLOW_ORIGIN=*

# Set the listen TCP port for the Prometheus metrics HTTP server
METRICS_PORT=5054

# Enables the monitoring service for sending system metrics to a remote endpoint
MONITORING_ENDPOINT=http://monitoring.example.com

# Defines how many seconds to wait between each message sent to the monitoring-endpoint
MONITORING_ENDPOINT_PERIOD=60

# Name of the Eth2 chain Lighthouse will sync and follow
NETWORK=mainnet

# Data directory for network keys
NETWORK_DIR=/path/to/network_dir

# The TCP/UDP ports to listen on
PORT=9000

# The TCP/UDP ports to listen on over IPv6
PORT6=9090

# The time before the start of a proposal slot at which payload attributes should be sent
PREPARE_PAYLOAD_LOOKAHEAD=333

# Maximum delay after the start of the slot at which to propose a reorging block
PROPOSER_REORG_CUTOFF=100

# Comma-separated list of integer offsets which can be used to avoid proposing reorging blocks at certain slots
PROPOSER_REORG_DISALLOWED_OFFSETS=0

# Maximum number of epochs since finalization at which proposer reorgs are allowed
PROPOSER_REORG_EPOCHS_SINCE_FINALIZATION=2

# Percentage of parent vote weight above which to attempt a proposer reorg
PROPOSER_REORG_PARENT_THRESHOLD=160

# Percentage of head vote weight below which to attempt a proposer reorg
PROPOSER_REORG_THRESHOLD=20

# Prune blobs from Lighthouse's database when they are older than the data availability boundary
PRUNE_BLOBS=true

# Prune execution payloads from Lighthouse's database
PRUNE_PAYLOADS=true

# The UDP port that quic will listen on
QUIC_PORT=9001

# The UDP port that quic will listen on over IPv6
QUIC_PORT6=9091

# Used to coordinate manual overrides of the SAFE_SLOTS_TO_IMPORT_OPTIMISTICALLY parameter
SAFE_SLOTS_TO_IMPORT_OPTIMISTICALLY=10

# Enables the outbound rate limiter (

requests made by this node)
SELF_LIMITER_PROTOCOLS="protocol1:10/60;protocol2:20/120"

# Some HTTP API requests can be optimized by caching the shufflings at each epoch
SHUFFLING_CACHE_SIZE=10

# Set the maximum number of attestation roots for the slasher to cache
SLASHER_ATT_CACHE_SIZE=100

# Set the database backend to be used by the slasher
SLASHER_BACKEND=lmdb

# Broadcast slashings found by the slasher to the rest of the network
SLASHER_BROADCAST=true

# Number of epochs per validator per chunk stored on disk
SLASHER_CHUNK_SIZE=100

# Set the slasher's database directory
SLASHER_DIR=/path/to/slasher_dir

# Configure how many epochs of history the slasher keeps
SLASHER_HISTORY_LENGTH=1000

# Maximum size of the MDBX database used by the slasher
SLASHER_MAX_DB_SIZE=100

# Set the delay from the start of the slot at which the slasher should ingest attestations
SLASHER_SLOT_OFFSET=1

# Configure how often the slasher runs batch processing
SLASHER_UPDATE_PERIOD=60

# Number of validators per chunk stored on disk
SLASHER_VALIDATOR_CHUNK_SIZE=1000

# Specifies how often a freezer DB restore point should be stored
SLOTS_PER_RESTORE_POINT=8192

# Specifies the size of the state cache
STATE_CACHE_SIZE=128

# Emergency fallback fee recipient for use in case the validator client does not have one configured
SUGGESTED_FEE_RECIPIENT=0x1234567890abcdef

# Path to directory containing eth2_testnet specs
TESTNET_DIR=/path/to/testnet_dir

# The target number of peers
TARGET_PEERS=50

# Used to coordinate manual overrides to the TERMINAL_BLOCK_HASH_ACTIVATION_EPOCH parameter
TERMINAL_BLOCK_HASH_EPOCH_OVERRIDE=100

# Used to coordinate manual overrides to the TERMINAL_BLOCK_HASH parameter
TERMINAL_BLOCK_HASH_OVERRIDE=0x1234567890abcdef

# Used to coordinate manual overrides to the TERMINAL_TOTAL_DIFFICULTY parameter
TERMINAL_TOTAL_DIFFICULTY_OVERRIDE=100000000000000000000

# One or more comma-delimited trusted peer ids which always have the highest score according to the peer scoring system
TRUSTED_PEERS=peer1,peer2

# Path to a json file containing the trusted setup params
TRUSTED_SETUP_FILE_OVERRIDE=/path/to/trusted_setup.json

# As per --validator-monitor-pubkeys, but the comma-separated list is contained within a file at the given path
VALIDATOR_MONITOR_FILE=/path/to/validator_monitor_file

# Once the validator monitor reaches this number of local validators it will stop collecting per-validator Prometheus metrics
VALIDATOR_MONITOR_INDIVIDUAL_TRACKING_THRESHOLD=64

# A comma-separated list of 0x-prefixed validator public keys
VALIDATOR_MONITOR_PUBKEYS=0x123,0x456

# Specify a weak subjectivity checkpoint in `block_root:epoch` format to verify the node's sync against
WSS_CHECKPOINT=0x1234567890abcdef:123

# Enable syncing from genesis
ALLOW_INSECURE_GENESIS_SYNC=false

# This flag disables all checks related to chain health
BUILDER_FALLBACK_DISABLE_CHECKS=false

# If present, apply compaction to the database on start-up
COMPACT_DB=false

# Disable the backfill sync rate-limiting
DISABLE_BACKFILL_RATE_LIMITING=false

# Explicitly disables syncing of deposit logs from the execution node
DISABLE_DEPOSIT_CONTRACT_SYNC=false

# Discovery automatically updates the nodes local ENR with an external IP address and port as seen by other peers on the network
DISABLE_ENR_AUTO_UPDATE=false

# Disables the inbound rate limiter (requests received by this node)
DISABLE_INBOUND_RATE_LIMITER=false

# Disable the timeouts applied to some internal locks by default
DISABLE_LOCK_TIMEOUTS=false

# If present, do not include timestamps in logging output
DISABLE_LOG_TIMESTAMP=false

# If present, do not configure the system allocator
DISABLE_MALLOC_TUNING=false

# Force Lighthouse to verify every execution block hash with the execution client during finalized sync
DISABLE_OPTIMISTIC_FINALIZED_SYNC=false

# Disables the discovery packet filter
DISABLE_PACKET_FILTER=false

# Do not attempt to reorg late blocks from other validators when proposing
DISABLE_PROPOSER_REORGS=false

# Disables the quic transport
DISABLE_QUIC=false

# Disables UPnP support
DISABLE_UPNP=false

# If present, uses an eth1 backend that generates static dummy data
DUMMY_ETH1=false

# Sets the local ENR IP address and port to match those set for lighthouse
ENR_MATCH=false

# Enable connection attempts to local addresses
ENABLE_PRIVATE_DISCOVERY=false

# If present the node will connect to an eth1 node
ETH1=false

# Purges the eth1 block and deposit caches
ETH1_PURGE_CACHE=false

# Attempts to download blocks all the way back to genesis when checkpoint syncing
GENESIS_BACKFILL=false

# Enable the graphical user interface and all its requirements
GUI=false

# Enable the RESTful HTTP API server
HTTP=false

# Serves the RESTful HTTP API server over TLS
HTTP_ENABLE_TLS=false

# Import and aggregate all attestations, regardless of validator subscriptions
IMPORT_ALL_ATTESTATIONS=false

# Act as a full node supporting light clients on the p2p network
LIGHT_CLIENT_SERVER=false

# Force outputting colors when emitting logs to the terminal
LOG_COLOR=false

# If present, compress old log files
LOGFILE_COMPRESS=false

# If present, log files will be generated as world-readable
LOGFILE_NO_RESTRICTED_PERMS=false

# Enable the Prometheus metrics HTTP server
METRICS=false

# Prevents sending various client identification information
PRIVATE=false

# Sets this beacon node at be a block proposer only node
PROPOSER_ONLY=false

# If present, the chain database will be deleted
PURGE_DB=false

# After a checkpoint sync, reconstruct historic states in the database
RECONSTRUCT_HISTORIC_STATES=false

# When present, Lighthouse will forget the payload statuses of any already-imported blocks
RESET_PAYLOAD_STATUSES=false

# Enables the outbound rate limiter (requests made by this node)
SELF_LIMITER=false

# Shutdown beacon node as soon as sync is completed
SHUTDOWN_AFTER_SYNC=false

# Run a slasher alongside the beacon node
SLASHER=false

# Standard option for a staking beacon node
STAKING=false

# Subscribe to all subnets regardless of validator count
SUBSCRIBE_ALL_SUBNETS=false

# Enables the automatic detection and monitoring of validators connected to the HTTP API
VALIDATOR_MONITOR_AUTO=false

# Sets all listening TCP/UDP ports to 0
ZERO_PORTS=false
```

You can save this file as `.env` in your project directory and adjust the paths, URLs, and other values as needed for your specific setup.