# Enable syncing from genesis, which is generally insecure and incompatible with data availability checks.
# Checkpoint syncing is the preferred method for syncing a node. Only use this flag when testing. DO NOT use on mainnet!
LIGHTHOUSE_CLI_BN_ALLOW_INSECURE_GENESIS_SYNC=

# This flag is deprecated and has no effect.
LIGHTHOUSE_CLI_BN_ALWAYS_PREFER_BUILDER_PAYLOAD=

# If present, apply compaction to the database on start-up. 
# Use with caution. It is generally not recommended unless auto-compaction is disabled.
LIGHTHOUSE_CLI_BN_COMPACT_DB=

# Disable the backfill sync rate-limiting. 
# This allow users to just sync the entire chain as fast as possible, 
# however it can result in resource contention which degrades staking performance. 
# Stakers should generally choose to avoid this flag since backfill sync is not required for staking.
LIGHTHOUSE_CLI_BN_DISABLE_BACKFILL_RATE_LIMITING=

# This flag is deprecated and has no effect.
LIGHTHOUSE_CLI_BN_DISABLE_DUPLICATE_WARN_LOGS=

# Disable the timeouts applied to some internal locks by default. 
# This can lead to less spurious failures on slow hardware but is considered experimental as it may obscure performance issues.
LIGHTHOUSE_CLI_BN_DISABLE_LOCK_TIMEOUTS=

# If present, do not include timestamps in logging output.
LIGHTHOUSE_CLI_BN_DISABLE_LOG_TIMESTAMP=

# If present, do not configure the system allocator. 
# Providing this flag will generally increase memory usage, it should only be provided when debugging specific memory allocation issues.
LIGHTHOUSE_CLI_BN_DISABLE_MALLOC_TUNING=

# Force Lighthouse to verify every execution block hash with the execution client during finalized sync.
# By default block hashes will be checked in Lighthouse and only passed to the EL if initial verification fails.
LIGHTHOUSE_CLI_BN_DISABLE_OPTIMISTIC_FINALIZED_SYNC=

# Disables the discovery packet filter. Useful for testing in smaller networks.
LIGHTHOUSE_CLI_BN_DISABLE_PACKET_FILTER=

# Do not attempt to reorg late blocks from other validators when proposing.
LIGHTHOUSE_CLI_BN_DISABLE_PROPOSER_REORGS=

# Disables the quic transport. The node will rely solely on the TCP transport for libp2p connections.
LIGHTHOUSE_CLI_BN_DISABLE_QUIC=

# Disables UPnP support. Setting this will prevent Lighthouse from attempting to automatically establish external port mappings.
LIGHTHOUSE_CLI_BN_DISABLE_UPNP=

# If present, uses an eth1 backend that generates static dummy data. Identical to the method used at the 2019 Canada interop.
LIGHTHOUSE_CLI_BN_DUMMY_ETH1=

# Lighthouse by default does not discover private IP addresses. Set this flag to enable connection attempts to local addresses.
LIGHTHOUSE_CLI_BN_ENABLE_PRIVATE_DISCOVERY=

# Sets the local ENR IP address and port to match those set for lighthouse.
# Specifically, the IP address will be the value of --listen-address and the UDP port will be --discovery-port.
LIGHTHOUSE_CLI_BN_ENR_MATCH=

# Attempts to download blocks all the way back to genesis when checkpoint syncing.
LIGHTHOUSE_CLI_BN_GENESIS_BACKFILL=

# If a block succeeds gossip validation whilst failing full validation, store the block SSZ as a file at this path. 
# This feature is only recommended for developers. 
# This directory is not pruned, users should be careful to avoid filling up their disks.
LIGHTHOUSE_CLI_BN_INVALID_GOSSIP_VERIFIED_BLOCKS_PATH=

# Specifies the log format used when emitting logs to the terminal. [possible values: JSON]
LIGHTHOUSE_CLI_BN_LOG_FORMAT=

# File path where the log file will be stored. 
# Once it grows to the value specified in --logfile-max-size a new log file is generated where future logs are stored. 
# Once the number of log files exceeds the value specified in --logfile-max-number the oldest log file will be overwritten.
LIGHTHOUSE_CLI_BN_LOGFILE=

# The verbosity level used when emitting logs to the log file. [default: debug] [possible values: info, debug, trace, warn, error, crit]
LIGHTHOUSE_CLI_BN_LOGFILE_DEBUG_LEVEL=

# Specifies the log format used when emitting logs to the logfile. [possible values: DEFAULT, JSON]
LIGHTHOUSE_CLI_BN_LOGFILE_FORMAT=

# The maximum number of log files that will be stored. If set to 0, background file logging is disabled. [default: 5]
LIGHTHOUSE_CLI_BN_LOGFILE_MAX_NUMBER=

# The maximum size (in MB) each log file can grow to before rotating. If set to 0, background file logging is disabled. [default: 200]
LIGHTHOUSE_CLI_BN_LOGFILE_MAX_SIZE=

# Refuse to skip more than this many slots when processing an attestation. 
# This prevents nodes on minority forks from wasting our time and disk space, but could also cause unnecessary consensus failures, so is disabled by default.
LIGHTHOUSE_CLI_BN_MAX_SKIP_SLOTS=

# Some HTTP API requests can be optimized by caching the shufflings at each epoch. 
# This flag allows the user to set the shuffling cache size in epochs. 
# Shufflings are dependent on validator count and setting this value to a large number can consume a large amount of memory.
LIGHTHOUSE_CLI_BN_SHUFFLING_CACHE_SIZE=

# Used to coordinate manual overrides of the SAFE_SLOTS_TO_IMPORT_OPTIMISTICALLY parameter. 
# This flag should only be used if the user has a clear understanding that the broad Ethereum community has elected to override this parameter 
# in the event of an attack at the PoS transition block. 
# Incorrect use of this flag can cause your node to possibly accept an invalid chain or sync more slowly. Be extremely careful with this flag.
LIGHTHOUSE_CLI_BN_SAFE_SLOTS_TO_IMPORT_OPTIMISTICALLY=

# Used to coordinate manual overrides to the TERMINAL_BLOCK_HASH_ACTIVATION_EPOCH parameter. 
# This flag should only be used if the user has a clear understanding that the broad Ethereum community has elected to override the terminal PoW block. 
# Incorrect use of this flag will cause your node to experience a consensus failure. Be extremely careful with this flag.
LIGHTHOUSE_CLI_BN_TERMINAL_BLOCK_HASH_EPOCH_OVERRIDE=

# Used to coordinate manual overrides to the TERMINAL_BLOCK_HASH parameter. 
# This flag should only be used if the user has a clear understanding that the broad Ethereum community has elected to override the terminal PoW block. 
# Incorrect use of this flag will cause your node to experience a consensus failure. Be extremely careful with this flag.
LIGHTHOUSE_CLI_BN_TERMINAL_BLOCK_HASH_OVERRIDE=

# Used to coordinate manual overrides to the TERMINAL_TOTAL_DIFFICULTY parameter. Accepts a 256-bit decimal integer (not a hex value). 
# This flag should only be used if the user has a clear understanding that the broad Ethereum community has elected to override the terminal difficulty. 
# Incorrect use of this flag will cause your node to experience a consensus failure. Be extremely careful with this flag.
LIGHTHOUSE_CLI_BN_TERMINAL_TOTAL_DIFFICULTY_OVERRIDE=

# Path to directory containing eth2_testnet specs. Defaults to a hard-coded Lighthouse testnet. 
# Only effective if there is no existing database.
LIGHTHOUSE_CLI_BN_TESTNET_DIR=

# One or more comma-delimited trusted peer ids which always have the highest score according to the peer scoring system.
LIGHTHOUSE_CLI_BN_TRUSTED_PEERS=

# Path to a json file containing the trusted setup params. 
# NOTE: This will override the trusted setup that is generated from the mainnet kzg ceremony. Use with caution.
LIGHTHOUSE_CLI_BN_TRUSTED_SETUP_FILE_OVERRIDE=

# As per --validator-monitor-pubkeys, but the comma-separated list is contained within a file at the given path.
LIGHTHOUSE_CLI_BN_VALIDATOR_MONITOR_FILE=

# Once the validator monitor reaches this number of local validators it will stop collecting per-validator Prometheus metrics and issuing per-validator logs. 
# Instead, it will provide aggregate metrics and logs. This avoids infeasibly high cardinality in the Prometheus database and high log volume when using many validators. Defaults to 64.
LIGHTHOUSE_CLI_BN_VALIDATOR_MONITOR_INDIVIDUAL_TRACKING_THRESHOLD=

# A comma-separated list of 0x-prefixed validator public keys. These validators will receive special monitoring and additional logging.
LIGHTHOUSE_CLI_BN_VALIDATOR_MONITOR_PUBKEYS=

# Specify a weak subjectivity checkpoint in `block_root:epoch` format to verify the node's sync against. 
# The block root should be 0x-prefixed. Note that this flag is for verification only, to perform a checkpoint sync from a recent state use --checkpoint-sync-url.
LIGHTHOUSE_CLI_BN_WSS_CHECKPOINT=
