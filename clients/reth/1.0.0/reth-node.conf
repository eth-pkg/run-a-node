# The path to the configuration file to use.
RETH_CLI_NODE_CONFIG=

# The chain this node is running.
# Possible values are either a built-in chain or the path to a chain specification file.
# Built-in chains: mainnet, sepolia, goerli, holesky, dev
# Default: mainnet
RETH_CLI_NODE_CHAIN=

# Add a new instance of a node.
# Configures the ports of the node to avoid conflicts with the defaults.
# Useful for running multiple nodes on the same machine.
# Max number of instances is 200.
# Changes to the following port numbers: - `DISCOVERY_PORT`: default + `instance` - 1 - `AUTH_PORT`: default + `instance` * 100 - 100 - `HTTP_RPC_PORT`: default - `instance` + 1 - `WS_RPC_PORT`: default + `instance` * 2 - 2
# Default: 1
RETH_CLI_NODE_INSTANCE=

# Sets all ports to unused, allowing the OS to choose random unused ports when sockets are bound.
# Mutually exclusive with `--instance`.
RETH_CLI_NODE_WITH_UNUSED_PORTS=

# Enable Prometheus metrics.
# The metrics will be served at the given interface and port.
RETH_CLI_NODE_METRICS=

# The path to the data dir for all reth files and subdirectories.
# Defaults to the OS-specific data directory:
# - Linux: `$XDG_DATA_HOME/reth/` or `$HOME/.local/share/reth/`
# - Windows: `{FOLDERID_RoamingAppData}/reth/`
# - macOS: `$HOME/Library/Application Support/reth/`
# Default: default
RETH_CLI_NODE_DATADIR=

# The absolute path to store static files in.
RETH_CLI_NODE_DATADIR_STATIC_FILES=

# Disable the discovery service
RETH_CLI_NODE_DISABLE_DISCOVERY=

# Disable the DNS discovery
RETH_CLI_NODE_DISABLE_DNS_DISCOVERY=

# Disable Discv4 discovery
RETH_CLI_NODE_DISABLE_DISCV4_DISCOVERY=

# Enable Discv5 discovery
RETH_CLI_NODE_ENABLE_DISCV5_DISCOVERY=

# The UDP address to use for devp2p peer discovery version 4
# Default: 0.0.0.0
RETH_CLI_NODE_DISCOVERY_ADDR=

# The UDP port to use for devp2p peer discovery version 4
# Default: 30303
RETH_CLI_NODE_DISCOVERY_PORT=

# The UDP IPv4 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv4
RETH_CLI_NODE_DISCOVERY_V5_ADDR=

# The UDP IPv6 address to use for devp2p peer discovery version 5. Overwritten by `RLPx` address, if it's also IPv6
RETH_CLI_NODE_DISCOVERY_V5_ADDR_IPV6=

# The UDP IPv4 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv4, or `--discv5.addr` is set
# Default: 9000
RETH_CLI_NODE_DISCOVERY_V5_PORT=

# The UDP IPv6 port to use for devp2p peer discovery version 5. Not used unless `--addr` is IPv6, or `--discv5.addr.ipv6` is set
# Default: 9000
RETH_CLI_NODE_DISCOVERY_V5_PORT_IPV6=

# The interval in seconds at which to carry out periodic lookup queries, for the whole run of the program
# Default: 60
RETH_CLI_NODE_DISCOVERY_V5_LOOKUP_INTERVAL=

# The interval in seconds at which to carry out boost lookup queries, for a fixed number of times, at bootstrap
# Default: 5
RETH_CLI_NODE_DISCOVERY_V5_BOOTSTRAP_LOOKUP_INTERVAL=

# The number of times to carry out boost lookup queries at bootstrap
# Default: 100
RETH_CLI_NODE_DISCOVERY_V5_BOOTSTRAP_LOOKUP_COUNTDOWN=

# Comma separated enode URLs of trusted peers for P2P connections.
RETH_CLI_NODE_TRUSTED_PEERS=

# Connect to or accept from trusted peers only
RETH_CLI_NODE_TRUSTED_ONLY=

# Comma separated enode URLs for P2P discovery bootstrap.
# Will fall back to a network-specific default if not specified.
RETH_CLI_NODE_BOOTNODES=

# Amount of DNS resolution requests retries to perform when peering
# Default: 0
RETH_CLI_NODE_DNS_RETRIES=

# The path to the known peers file. Connected peers are dumped to this file on nodes shutdown, and read on startup. Cannot be used with `--no-persist-peers`.
RETH_CLI_NODE_PEERS_FILE=

# Custom node identity
# Default: reth/v1.0.0-rc.2-d786b45/x86_64-unknown-linux-gnu
RETH_CLI_NODE_IDENTITY=

# Secret key to use for this node.
# This will also deterministically set the peer ID. If not specified, it will be set in the data dir for the chain being used.
RETH_CLI_NODE_P2P_SECRET_KEY=

# Do not persist peers.
RETH_CLI_NODE_NO_PERSIST_PEERS=

# NAT resolution method (any|none|upnp|publicip|extip:<IP>)
# Default: any
RETH_CLI_NODE_NAT=

# Network listening address
# Default: 0.0.0.0
RETH_CLI_NODE_ADDR=

# Network listening port
# Default: 30303
RETH_CLI_NODE_PORT=

# Maximum number of outbound requests.
# Default: 100
RETH_CLI_NODE_MAX_OUTBOUND_PEERS=

# Maximum number of inbound requests.
# Default: 30
RETH_CLI_NODE_MAX_INBOUND_PEERS=

# Experimental, for usage in research. Sets the max accumulated byte size of transactions to pack in one response. Spec'd at 2MiB.
# Default: 2097152
RETH_CLI_NODE_POOLED_TX_RESPONSE_SOFT_LIMIT=

# Experimental, for usage in research. Sets the max accumulated byte size of transactions to request in one request.
# Default: 131072
RETH_CLI_NODE_POOLED_TX_PACK_SOFT_LIMIT=

# Enable the HTTP-RPC server
RETH_CLI_NODE_HTTP=

# Http server address to listen on
# Default: 127.0.0.1
RETH_CLI_NODE_HTTP_ADDR=

# Http server port to listen on
# Default: 8545
RETH_CLI_NODE_HTTP_PORT=

# Rpc Modules to be configured for the HTTP server
# Possible values: admin, debug, eth, net, trace, txpool, web3, rpc, reth, ots, eth-call-bundle
RETH_CLI_NODE_HTTP_API=

# Http Corsdomain to allow request from
RETH_CLI_NODE_HTTP_CORSDOMAIN=

# Enable the WS-RPC server
RETH_CLI_NODE_WS=

# Ws server address to listen on
# Default: 127.0.0.1
RETH_CLI_NODE_WS_ADDR=

# Ws server port to listen on
# Default: 8546
RETH_CLI_NODE_WS_PORT=

# Origins from which to accept `WebSocket` requests
RETH_CLI_NODE_WS_ORIGINS=

# Rpc Modules to be configured for the WS server
# Possible values: admin, debug, eth, net, trace, txpool, web3, rpc, reth, ots, eth-call-bundle
RETH_CLI_NODE_WS_API=

# Disable the IPC-RPC server
RETH_CLI_NODE_IPCDISABLE=

# Filename for IPC socket/pipe within the datadir
# Default: /tmp/reth.ipc
RETH_CLI_NODE_IPCPATH=

# Auth server address to listen on
# Default: 127.0.0.1
RETH_CLI_NODE_AUTHRPC_ADDR=

# Auth server port to listen on
# Default: 8551
RETH_CLI_NODE_AUTHRPC_PORT=

# Path to a JWT secret to use for the authenticated engine-API RPC server.
# This will enforce JWT authentication for all requests coming from the consensus layer.
# If no path is provided, a secret will be generated and stored in the datadir under `<DIR>/<CHAIN_ID>/jwt.hex`. For mainnet this would be `~/.reth/mainnet/jwt.hex` by default.
RETH_CLI_NODE_AUTHRPC_JWTSECRET=

# Enable auth engine API over IPC
RETH_CLI_NODE_AUTH_IPC=

# Filename for auth IPC socket/pipe within the datadir
# Default: /tmp/reth_engine_api.ipc
RETH_CLI_NODE_AUTH_IPC_PATH=

# Hex encoded JWT secret to authenticate the regular RPC server(s), see `--http.api` and `--ws.api`.
# This is __not__ used for the authenticated engine-API RPC server, see `--authrpc.jwtsecret`.
RETH_CLI_NODE_RPC_JWTSECRET=

# Set the maximum RPC request payload size for both HTTP and WS in megabytes
# Default: 15
RETH_CLI_NODE_RPC_MAX_REQUEST_SIZE=

# Set the maximum RPC response payload size for both HTTP and WS in megabytes
# Default: 160
# Aliases: rpc.returndata.limit
RETH_CLI_NODE_RPC_MAX_RESPONSE_SIZE=

# Set the maximum concurrent subscriptions per connection
# Default: 1024
RETH_CLI_NODE_RPC_MAX_SUBSCRIPTIONS_PER_CONNECTION=

# Maximum number of RPC server connections
# Default: 500
RETH_CLI_NODE_RPC_MAX_CONNECTIONS=

# Maximum number of concurrent tracing requests
# Default: 14
RETH_CLI_NODE_RPC_MAX_TRACING_REQUESTS=

# Maximum number of blocks that could be scanned per filter request. (0 = entire chain)
# Default: 100000
RETH_CLI_NODE_RPC_MAX_BLOCKS_PER_FILTER=

# Maximum number of logs that can be returned in a single response. (0 = no limit)
# Default: 20000
RETH_CLI_NODE_RPC_MAX_LOGS_PER_RESPONSE=

# Maximum gas limit for `eth_call` and call tracing RPC methods
# Default: 50000000
RETH_CLI_NODE_RPC_GASCAP=

# Max number of blocks in cache
# Default: 5000
RETH_CLI_NODE_RPC_CACHE_MAX_BLOCKS=

# Max number receipts in cache
# Default: 2000
RETH_CLI_NODE_RPC_CACHE_MAX_RECEIPTS=

# Max number of bytes for cached env data
# Default: 1000
RETH_CLI_NODE_RPC_CACHE_MAX_ENVS=

# Max number of concurrent database requests
# Default: 512
RETH_CLI_NODE_RPC_CACHE_MAX_CONCURRENT_DB_REQUESTS=

# Number of recent blocks to check for gas price
# Default: 20
RETH_CLI_NODE_GPO_BLOCKS=

# Gas Price below which gpo will ignore transactions
# Default: 2
RETH_CLI_NODE_GPO_IGNOREPRICE=

# Maximum transaction priority fee(or gasprice before London Fork) to be recommended by gpo
# Default: 500000000000
RETH_CLI_NODE_GPO_MAXPRICE=

# The percentile of gas prices to use for the estimate
# Default: 60
RETH_CLI_NODE_GPO_PERCENTILE=

# Max number of transaction in the pending sub-pool
# Default: 10000
RETH_CLI_NODE_TXPOOL_PENDING_MAX_COUNT=

# Max size of the pending sub-pool in megabytes
# Default: 20
RETH_CLI_NODE_TXPOOL_PENDING_MAX_SIZE=

# Max number of transaction in the basefee sub-pool
# Default: 10000
RETH_CLI_NODE_TXPOOL_BASEFEE_MAX_COUNT=

# Max size of the basefee sub-pool in megabytes
# Default: 20
RETH_CLI_NODE_TXPOOL_BASEFEE_MAX_SIZE=

# Max number of transaction in the queued sub-pool
# Default: 10000
RETH_CLI_NODE_TXPOOL_QUEUED_MAX_COUNT=

# Max size of the queued sub-pool in megabytes
# Default: 20
RETH_CLI_NODE_TXPOOL_QUEUED_MAX_SIZE=

# Max number of executable transaction slots guaranteed per account
# Default: 16
RETH_CLI_NODE_TXPOOL_MAX_ACCOUNT_SLOTS=

# Price bump (in %) for the transaction pool underpriced check
# Default: 10
RETH_CLI_NODE_TXPOOL_PRICEBUMP=

# Price bump percentage to replace an already existing blob transaction
# Default: 100
RETH_CLI_NODE_BLOBPOOL_PRICEBUMP=

# Max size in bytes of a single transaction allowed to enter the pool
# Default: 131072
RETH_CLI_NODE_TXPOOL_MAX_TX_INPUT_BYTES=

# The maximum number of blobs to keep in the in memory blob cache
# Default: 100
RETH_CLI_NODE_TXPOOL_MAX_CACHED_ENTRIES=

# Flag to disable local transaction exemptions
RETH_CLI_NODE_TXPOOL_NOLOCALS=

# Flag to allow certain addresses as local
RETH_CLI_NODE_TXPOOL_LOCALS=

# Flag to toggle local transaction propagation
RETH_CLI_NODE_TXPOOL_NO_LOCAL_TRANSACTIONS_PROPAGATION=

# Block extra data set by the payload builder
# Default: reth/v1.0.0-rc.2/linux
RETH_CLI_NODE_BUILDER_EXTRADATA=

# Target gas ceiling for built blocks
# Default: 30000000
RETH_CLI_NODE_BUILDER_GASLIMIT=

# The interval at which the job should build a new payload after the last (in seconds)
# Default: 1
RETH_CLI_NODE_BUILDER_INTERVAL=

# The deadline for when the payload builder job should resolve
# Default: 12
RETH_CLI_NODE_BUILDER_DEADLINE=

# Maximum number of tasks to spawn for building a payload
# Default: 3
RETH_CLI_NODE_BUILDER_MAX_TASKS=

# Flag indicating whether the node should be terminated after the pipeline sync
RETH_CLI_NODE_DEBUG_TERMINATE=

# Set the chain tip manually for testing purposes.
# NOTE: This is a temporary flag
RETH_CLI_NODE_DEBUG_TIP=

# Runs the sync only up to the specified block
RETH_CLI_NODE_DEBUG_MAX_BLOCK=

# Runs a fake consensus client that advances the chain using recent block hashes on Etherscan. If specified, requires an `ETHERSCAN_API_KEY` environment variable
RETH_CLI_NODE_DEBUG_ETHERSCAN=

# Runs a fake consensus client using blocks fetched from an RPC `WebSocket` endpoint
RETH_CLI_NODE_DEBUG_RPC_CONSENSUS_WS=

# If provided, the engine will skip `n` consecutive FCUs
RETH_CLI_NODE_DEBUG_SKIP_FCU=

# If provided, the engine will skip `n` consecutive new payloads
RETH_CLI_NODE_DEBUG_SKIP_NEW_PAYLOAD=

# The path to store engine API messages at. If specified, all of the intercepted engine API messages will be written to specified location
RETH_CLI_NODE_DEBUG_ENGINE_API_STORE=

# Database logging level. Levels higher than "notice" require a debug build
# Possible values:
# - fatal:   Enables logging for critical conditions, i.e. assertion failures
# - error:   Enables logging for error conditions
# - warn:    Enables logging for warning conditions
# - notice:  Enables logging for normal but significant condition
# - verbose: Enables logging for verbose informational
# - debug:   Enables logging for debug-level messages
# - trace:   Enables logging for trace debug-level messages
# - extra:   Enables logging for extra debug-level messages
RETH_CLI_NODE_DB_LOG_LEVEL=

# Open environment in exclusive/monopolistic mode. Makes it possible to open a database on an NFS volume
# Possible values: true, false
RETH_CLI_NODE_DB_EXCLUSIVE=

# Start the node in dev mode
# This mode uses a local proof-of-authority consensus engine with either fixed block times or automatically mined blocks.
# Disables network discovery and enables local http server.
# Prefunds 20 accounts derived by mnemonic "test test test test test test test test test test test junk" with 10 000 ETH each.
RETH_CLI_NODE_DEV=

# How many transactions to mine per block
RETH_CLI_NODE_DEV_BLOCK_MAX_TRANSACTIONS=

# Interval between blocks.
# Parses strings using [`humantime::parse_duration`]
# --dev.block-time 12s
RETH_CLI_NODE_DEV_BLOCK_TIME=

# Run full node. Only the most recent [`MINIMUM_PRUNING_DISTANCE`] block states are stored. This flag takes priority over pruning configuration in reth.toml
RETH_CLI_NODE_FULL=

# The format to use for logs written to stdout
# Possible values:
# - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging
# - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications
# - terminal: Represents terminal-friendly formatting for logs
# Default: terminal
RETH_CLI_NODE_LOG_STDOUT_FORMAT=

# The filter to use for logs written to stdout
RETH_CLI_NODE_LOG_STDOUT_FILTER=

# The format to use for logs written to the log file
# Possible values:
# - json:     Represents JSON formatting for logs. This format outputs log records as JSON objects, making it suitable for structured logging
# - log-fmt:  Represents logfmt (key=value) formatting for logs. This format is concise and human-readable, typically used in command-line applications
# - terminal: Represents terminal-friendly formatting for logs
# Default: terminal
RETH_CLI_NODE_LOG_FILE_FORMAT=

# The filter to use for logs written to the log file
# Default: debug
RETH_CLI_NODE_LOG_FILE_FILTER=

# The path to put log files in
# Default: /home/eniko/.cache/reth/logs
RETH_CLI_NODE_LOG_FILE_DIRECTORY=

# The maximum size (in MB) of one log file
# Default: 200
RETH_CLI_NODE_LOG_FILE_MAX_SIZE=

# The maximum amount of log files that will be stored. If set to 0, background file logging is disabled
# Default: 5
RETH_CLI_NODE_LOG_FILE_MAX_FILES=

# Write logs to journald
RETH_CLI_NODE_LOG_JOURNALD=

# The filter to use for logs written to journald
# Default: error
RETH_CLI_NODE_LOG_JOURNALD_FILTER=

# Sets whether or not the formatter emits ANSI terminal escape codes for colors and other text formatting
# Possible values:
# - always: Colors on
# - auto:   Colors on
# - never:  Colors off
# Default: always
RETH_CLI_NODE_COLOR=

# Set the minimum log level.
# -v      Errors
# -vv     Warnings
# -vvv    Info
# -vvvv   Debug
# -vvvvv  Traces (warning: very verbose!)
RETH_CLI_NODE_VERBOSITY=

# Silence all log output
RETH_CLI_NODE_QUIET=
