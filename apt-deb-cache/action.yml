name: 'Cache and Install Apt (.deb) Packages'
description: 'A GitHub Action to cache and install Apt (.deb) packages'
author: 'eth-pkg'
inputs:
  packages:
    description: 'A space-separated list of Apt (.deb) packages to install'
    required: true
runs:
  using: 'composite'
  steps:
    - name: Create deb-cache directory if not exists
      run: mkdir -p ./deb-cache
      shell: bash

    - name: Get package versions
      id: get-versions
      run: |
        echo "${{ inputs.packages }}" | tr ' ' '\n' | sed 's/\\//g' | sed '/^$/d' > package-list.txt
        cat package-list.txt
        while IFS= read -r package; do
          version=$(apt-cache policy $package | grep Candidate | awk '{print $2}')
          echo "$package=$version" >> package-versions.txt
        done < package-list.txt
      shell: bash

    - name: Set up cache for each package
      id: cache-packages
      uses: actions/cache@v3
      with:
        path: ./deb-cache
        key: ${{ runner.os }}-deb-${{ hashFiles('package-versions.txt') }}-${{ runner.os }}-${{ runner.architecture }}
        restore-keys: |
          ${{ runner.os }}-deb-

    - name: Download packages if not cached
      run: |
        while IFS= read -r package; do
          version=$(grep "^$package=" package-versions.txt | cut -d '=' -f 2)
          # Remove previous versions if a new package is downloaded
          if [ ! -f ./deb-cache/$package-$version.deb ]; then
            echo "Cache miss for $package=$version. Downloading..."
            rm -f ./deb-cache/$package-*.deb
            apt-get download $package=$version -y -qq --download-only -o=dir::cache=./deb-cache
            ls ./deb-cache
            mv ./deb-cache/$package*.deb ./deb-cache/$package-$version.deb
          else
            echo "Cache hit for $package=$version. Using cached package."
          fi
        done < package-list.txt
      shell: bash

    - name: Install packages
      run: |
        sudo dpkg -i ./deb-cache/*.deb || sudo apt-get install -f -y
      shell: bash
